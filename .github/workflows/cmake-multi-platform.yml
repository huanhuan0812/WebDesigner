name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macOS-latest, windows-latest]
      fail-fast: false
    name: Build on ${{ matrix.os }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: ls
      run: ls


    # Install Qt for each platform
    - name: Install Qt windows
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        arch: 'win64_mingw'

    - name: update mingw
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        mupdate: true
        install: >-
          mingw-w64-ucrt-x86_64-toolchain
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-binutils

    - name: Add MinGW to PATH
      if: matrix.os == 'windows-latest'
      run: |
          echo "${{ runner.temp }}/msys64/ucrt64/bin" >> $GITHUB_PATH
          echo "QT_ROOT_DIR=D:/a/WebDesigner/Qt/6.8.3/mingw_64" >> $GITHUB_ENV

    - name: Install Qt linux 
      if: matrix.os == 'ubuntu-22.04'
      uses: jurplel/install-qt-action@v4
      with:
        target: 'desktop'

    - name: Install Qt mac
      if: matrix.os == 'macOS-latest'
      uses: jurplel/install-qt-action@v4
      with:
        target: 'desktop'

    # Install build tools (CMake + Ninja)
    - name: Install CMake
      uses: lukka/get-cmake@latest
      with:
        cmake-version: '3.25.0'

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    # Create build directory
    - name: Create build directory
      run: mkdir build

    # Configure with CMake (Ninja generator + Release mode)
    - name: Configure with CMake
      run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build

    # Build with Ninja
    - name: Build application
      run: cd build && ninja

    # Package application for each platform
    - name: Package Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        ls
        mkdir -p app
        cp build/WebDesigner.exe app/
        cd app
        windeployqt WebDesigner.exe
    
    - name: Package Linux application
      if: matrix.os == 'ubuntu-22.04'
      run: |
        ls
        mkdir -p app
        cp build/WebDesigner app/
        sudo apt update
        sudo apt install libfuse2
        wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt-continuous-x86_64.AppImage
        sudo mv linuxdeployqt-continuous-x86_64.AppImage /usr/local/bin/linuxdeployqt
        linuxdeployqt app/WebDesigner -appimage
    
    - name: Package macOS application
      if: matrix.os == 'macOS-latest'
      run: |
        ls
        mkdir -p app
        macdeployqt build/WebDesigner.app -dmg
        ls build
        cp build/WebDesigner.app/Contents/MacOS/WebDesigner app/
        
    
    # Create archive
    - name: Create compressed archive
      run: tar -czvf app-${{ matrix.os }}.tar.gz app

    # Upload artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.os }}
        path: app-${{ matrix.os }}.tar.gz