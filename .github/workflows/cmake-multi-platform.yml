name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macOS-latest, windows-latest]
      fail-fast: false
    name: Build on ${{ matrix.os }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v3

    # Install Qt for each platform
    - name: Install Qt (Windows)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.3'  # 明确指定Qt版本
        arch: 'win64_mingw'

    - name: Setup MinGW (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-toolchain
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-binutils
        release: false  # 防止自动升级

    - name: Set Windows Environment
      if: matrix.os == 'windows-latest'
      run: |
        echo "${{ runner.temp }}/msys64/ucrt64/bin" >> $GITHUB_PATH
        echo "QT_ROOT_DIR=${{ env.QT_ROOT }}" >> $GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=${{ env.QT_ROOT }}" >> $GITHUB_ENV

    - name: Install Qt (Linux)
      if: matrix.os == 'ubuntu-22.04'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.3'
        target: 'desktop'

    - name: Install Qt (macOS)
      if: matrix.os == 'macOS-latest'
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.3'
        target: 'desktop'

    # Install build tools
    - name: Install CMake
      uses: lukka/get-cmake@latest
      with:
        cmake-version: '3.25.0'

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    # Configure with CMake
    - name: Configure with CMake
      run: |
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DQT_NO_LINK_ENTRYPOINT=ON \  # 关键修复
          -B build

    # Build with Ninja
    - name: Build application
      run: cd build && ninja

    # Package for each platform
    - name: Package Windows
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p app
        cp build/WebDesigner.exe app/
        windeployqt --dir app app/WebDesigner.exe

    - name: Package Linux
      if: matrix.os == 'ubuntu-22.04'
      run: |
        mkdir -p app
        cp build/WebDesigner app/
        # 创建.desktop文件
        echo "[Desktop Entry]
        Type=Application
        Name=WebDesigner
        Exec=WebDesigner
        Icon=application-default-icon
        Categories=Development;
        Terminal=false" > app/WebDesigner.desktop
        # 部署Qt库
        wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt-continuous-x86_64.AppImage
        ./linuxdeployqt-continuous-x86_64.AppImage app/WebDesigner.desktop -appimage

    - name: Package macOS
      if: matrix.os == 'macOS-latest'
      run: |
        mkdir -p app
        macdeployqt build/WebDesigner.app -dmg
        cp build/WebDesigner.dmg app/

    # Create and upload artifact
    - name: Create archive
      run: tar -czvf app-${{ matrix.os }}.tar.gz app

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.os }}
        path: app-${{ matrix.os }}.tar.gz